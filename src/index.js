import path from 'path';

import fs from 'fs';

import validateOptions from 'schema-utils';
import yaml from 'js-yaml';

import schema from './options.json';
import isEmpty from './Helpers/isEmpty';

class DrupalLibrarifyWebpackPlugin {
  constructor(opts = {}) {
    const options = {
      prefix: 'drupal.',
      ...opts,
    };

    validateOptions(schema, options, {
      name: 'Drupal Librarify Plugin',
      baseDataPath: 'options',
    });

    this.options = options || {};
  }

  apply(compiler) {
    const plugin = { name: 'DrupalLibrarifyWebpackPlugin' };
    compiler.hooks.afterEmit.tapAsync(
      plugin,
      this.afterEmitTapCallback.bind(this)
    );
  }

  afterEmitTapCallback(compilation, callback) {
    this.generateYamlFile(compilation);
    callback();
  }

  generateYamlFile(compilation) {
    const modulePathname = path.resolve(process.cwd());
    const moduleBasename = path.basename(path.resolve(process.cwd()));
    const yamlFilename = `${moduleBasename}.libraries.yml`;
    const yamlFilepath = `${modulePathname}/${yamlFilename}`;

    let libraries = {};
    if (fs.existsSync(yamlFilepath)) {
      libraries = yaml.safeLoad(fs.readFileSync(yamlFilepath, 'utf8'));
    }
    if (
      typeof libraries[this.options.prefix + moduleBasename] === 'undefined'
    ) {
      libraries[this.options.prefix + moduleBasename] = {};
    }
    libraries[this.options.prefix + moduleBasename].js = {};
    libraries[this.options.prefix + moduleBasename].css = { theme: {} };

    compilation.chunks.forEach(function (chunk) {
      // Explore each asset filename generated by the chunk.
      chunk.files.forEach(function (filename) {
        const basename = path.basename(filename);
        const extname = path.extname(filename);
        const pathname = path.relative(basename, filename);
        switch (extname) {
          case '.js':
            libraries[this.options.prefix + moduleBasename].js[pathname] = {
              preprocess: false,
            };
            break;

          case '.css':
            libraries[this.options.prefix + moduleBasename].css.theme[
              pathname
            ] = {
              minified: true,
            };
            break;

          default:
            // None.
            break;
        }
      });
    });

    // Create new file assets.
    // fs.writeFileSync(yamlFilepath, yaml.dump(libraries));
    if (
      !isEmpty(libraries[this.options.prefix + moduleBasename].js) ||
      !isEmpty(libraries[this.options.prefix + moduleBasename].css.theme)
    ) {
      const content = yaml.dump(libraries);
      compilation.assets[yamlFilename] = {
        source() {
          return content;
        },
        size() {
          return content.length;
        },
      };
    }
  }
}

export default DrupalLibrarifyWebpackPlugin;
