import path from 'path';

import fs from 'fs';

import validateOptions from 'schema-utils';
import yaml from 'js-yaml';

import schema from './options.json';
import isEmpty from './Helpers/isEmpty';

class DrupalLibrarifyWebpackPlugin {
  constructor(opts = {}) {
    const dependencies = {
      'core/jquery': true,
      'core/jquery.once': true,
      'core/drupal': true,
      'core/drupal.form': false,
      'core/drupalSettings': true,
    };
    const options = {
      prefix: 'drupal.',
      version: false,
      header: false,
      dependencies,
      ...opts,
    };

    validateOptions(schema, options, {
      name: 'Drupal Librarify Plugin',
      baseDataPath: 'options',
    });

    // Normalize dependencies
    if (Array.isArray(this.options.dependencies)) {
      const entries = new Map();
      this.options.dependencies.forEach((dependency) =>
        entries.set(dependency, true)
      );
      this.options.dependencies = Object.fromEntries(entries);
    }
    this.options.dependencies = {
      ...dependencies,
      ...this.options.dependencies,
    };
    this.options.dependencies = Object.keys(this.options.dependencies).filter(
      (dependency) => {
        return this.options.dependencies[dependency];
      }
    );

    this.options = options || {};
  }

  apply(compiler) {
    const plugin = { name: 'DrupalLibrarifyWebpackPlugin' };
    compiler.hooks.afterEmit.tapAsync(
      plugin,
      this.afterEmitTapCallback.bind(this)
    );
  }

  afterEmitTapCallback(compilation, callback) {
    this.generateYamlFile(compilation);
    callback();
  }

  generateYamlFile(compilation) {
    const modulePathname = path.resolve(process.cwd());
    const moduleBasename = path.basename(path.resolve(process.cwd()));
    const yamlFilename = `${moduleBasename}.libraries.yml`;
    const yamlFilepath = `${modulePathname}/${yamlFilename}`;
    const libraryName = `${this.options.prefix}${moduleBasename}`;

    let libraries = {};

    // Try to load an existing file.
    if (fs.existsSync(yamlFilepath)) {
      try {
        libraries = yaml.safeLoad(fs.readFileSync(yamlFilepath, 'utf8')) || {};
      } catch (e) {
        libraries[libraryName] = {};
      }
    }

    // Init library entry
    if (!Object.prototype.hasOwnProperty.call(libraries, libraryName)) {
      libraries[libraryName] = {};
    }

    // Init js and css entry
    libraries[libraryName].js = {};
    libraries[libraryName].css = {
      base: {},
      layout: {},
      component: {},
      state: {},
      theme: {},
    };

    // Append files.
    compilation.chunks.forEach((chunk) => {
      // Explore each asset filename generated by the chunk.
      chunk.files.forEach((filename) => {
        const extname = path.extname(filename);
        const pathname = path.relative(
          modulePathname,
          path.resolve(compilation.compiler.outputPath, filename)
        );
        switch (extname) {
          case '.js':
            libraries[libraryName].js[pathname] = {
              preprocess: false,
            };
            break;

          case '.css':
            libraries[libraryName].css.theme[pathname] = {
              minified: true,
            };
            break;

          default:
            // None.
            break;
        }
      });
    });

    // Add Dependencies
    libraries[libraryName].dependencies = this.options.dependencies;

    // Purge
    if (!isEmpty(libraries[libraryName].js)) {
      delete libraries[libraryName].js;
    }
    for (const property in libraries[libraryName].css) {
      if (!isEmpty(libraries[libraryName].css[property])) {
        delete libraries[libraryName].css[property];
      }
    }
    if (!isEmpty(this.options.dependencies)) {
      delete libraries[libraryName].dependencies;
    }

    // Create new file assets.
    // we are currently afterEmit so compilation.assets cannot be used.
    if (
      typeof libraries[libraryName].js !== 'undefined' ||
      typeof libraries[libraryName].css !== 'undefined'
    ) {
      fs.writeFileSync(yamlFilepath, yaml.dump(libraries));
    }
  }
}

export default DrupalLibrarifyWebpackPlugin;
